name: Version and Tag

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
        default: 'patch'
      prerelease_id:
        description: 'Prerelease identifier (alpha, beta, rc)'
        required: false
        type: string
        default: 'alpha'

jobs:
  check-version-change:
    name: Check Version Change
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      version_changed: ${{ steps.version-check.outputs.changed }}
      new_version: ${{ steps.version-check.outputs.version }}
      should_tag: ${{ steps.version-check.outputs.should_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Check if version changed
        id: version-check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get previous version (from previous commit)
          git checkout HEAD~1 -- package.json 2>/dev/null || true
          if [ -f package.json ]; then
            PREVIOUS_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "0.0.0")
          else
            PREVIOUS_VERSION="0.0.0"
          fi
          
          # Restore current version
          git checkout HEAD -- package.json
          
          echo "Previous version: $PREVIOUS_VERSION"
          echo "Current version: $CURRENT_VERSION"
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "should_tag=true" >> $GITHUB_OUTPUT
            echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "should_tag=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No version change detected"
          fi

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version-bump.outputs.version }}
      new_tag: ${{ steps.version-bump.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
          
      - name: Configure git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bump version
        id: version-bump
        run: |
          # Determine version bump command
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          PRERELEASE_ID="${{ github.event.inputs.prerelease_id }}"
          
          if [ "$VERSION_TYPE" = "prerelease" ] && [ -n "$PRERELEASE_ID" ]; then
            NEW_VERSION=$(npm version prerelease --preid="$PRERELEASE_ID" --no-git-tag-version)
          else
            NEW_VERSION=$(npm version "$VERSION_TYPE" --no-git-tag-version)
          fi
          
          # Remove 'v' prefix for output
          NEW_VERSION="${NEW_VERSION#v}"
          NEW_TAG="v$NEW_VERSION"
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "tag=$NEW_TAG" >> $GITHUB_OUTPUT
          
          echo "✅ Bumped version to $NEW_VERSION"
          
      - name: Update README if needed
        run: |
          npm run prepack || true
          npm run postpack || true
          
      - name: Commit version bump
        run: |
          git add package.json package-lock.json README.md
          git commit -m "chore: bump version to v${{ steps.version-bump.outputs.version }}" || true
          git push

  create-tag:
    name: Create Git Tag
    runs-on: ubuntu-latest
    needs: [check-version-change, bump-version]
    if: |
      always() && 
      (needs.check-version-change.outputs.should_tag == 'true' || 
       needs.bump-version.outputs.new_version != '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          # Fetch latest if we bumped version
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.ref }}
          
      - name: Determine version and tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ needs.bump-version.outputs.new_version }}"
            TAG="${{ needs.bump-version.outputs.new_tag }}"
          else
            VERSION="${{ needs.check-version-change.outputs.new_version }}"
            TAG="v$VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          echo "Version: $VERSION"
          echo "Tag: $TAG"
          
      - name: Check if tag exists
        id: tag-check
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Tag $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag $TAG does not exist, will create"
          fi
          
      - name: Create and push tag
        if: steps.tag-check.outputs.exists == 'false'
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create annotated tag
          git tag -a "$TAG" -m "Release version $VERSION"
          git push origin "$TAG"
          
          echo "✅ Created and pushed tag $TAG"
          echo "🚀 This will trigger the release workflow"
