name: Publish to NPM

on:
  release:
    types: [released]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag to publish (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    environment: npm-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch the specific tag if triggered by workflow_dispatch
          ref: ${{ github.event.inputs.tag || github.ref }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Run tests
        run: npm run test
        
      - name: Build project
        run: npm run build
        
      - name: Prepare package
        run: npm run prepack
        
      - name: Check package contents
        run: |
          echo "üì¶ Package contents:"
          npm pack --dry-run
          
      - name: Verify package version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ github.event.release.tag_name || github.event.inputs.tag }}"
          TAG_VERSION="${TAG_VERSION#v}"  # Remove 'v' prefix if present
          
          echo "Package version: $PACKAGE_VERSION"
          echo "Tag version: $TAG_VERSION"
          
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "‚ùå Version mismatch: package.json version ($PACKAGE_VERSION) doesn't match tag ($TAG_VERSION)"
            exit 1
          fi
          
          echo "‚úÖ Version match confirmed"
        
      - name: Check if version already published
        id: version-check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          # Check if this version already exists on NPM
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
            echo "‚ùå Version $PACKAGE_VERSION is already published to NPM"
            echo "already_published=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Version $PACKAGE_VERSION is not yet published"
            echo "already_published=false" >> $GITHUB_OUTPUT
          fi
        
      - name: Publish to NPM
        if: steps.version-check.outputs.already_published == 'false'
        run: |
          # Determine if this is a prerelease
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [[ $PACKAGE_VERSION =~ -(alpha|beta|rc|pre) ]]; then
            echo "üì¶ Publishing prerelease version to NPM with 'next' tag"
            npm publish --tag next
          else
            echo "üì¶ Publishing stable version to NPM with 'latest' tag"
            npm publish
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Clean up
        if: always()
        run: npm run postpack
        
      - name: Post-publish verification
        if: steps.version-check.outputs.already_published == 'false'
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          
          echo "‚è≥ Waiting for package to be available on NPM..."
          sleep 10
          
          # Verify the package was published successfully
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
            echo "‚úÖ Successfully published $PACKAGE_NAME@$PACKAGE_VERSION to NPM"
            echo "üìã Package info:"
            npm view "$PACKAGE_NAME@$PACKAGE_VERSION" --json | jq -r '.description // "No description"'
            echo "üîó NPM URL: https://www.npmjs.com/package/$PACKAGE_NAME/v/$PACKAGE_VERSION"
          else
            echo "‚ùå Failed to verify package publication"
            exit 1
          fi
