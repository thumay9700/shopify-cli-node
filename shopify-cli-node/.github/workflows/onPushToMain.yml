name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_valid: ${{ steps.version.outputs.is_valid }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v$VERSION"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Validate version format
          if [[ $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+([\-\+].*)?$ ]]; then
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "✅ Valid version: $VERSION"
          else
            echo "is_valid=false" >> $GITHUB_OUTPUT
            echo "❌ Invalid version format: $VERSION"
          fi
        
      - name: Check if release exists
        id: release-check
        run: |
          if gh release view "${{ steps.version.outputs.tag }}" > /dev/null 2>&1; then
            echo "Release ${{ steps.version.outputs.tag }} already exists"
            echo "::warning::Release ${{ steps.version.outputs.tag }} already exists - skipping release creation"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release ${{ steps.version.outputs.tag }} does not exist - proceeding"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build and Pack
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.is_valid == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: npm
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Run tests
        run: npm run test
        
      - name: Build project
        run: npm run build
        
      - name: Update README
        run: |
          npm run prepack
          
      - name: Create tarball
        run: npm pack
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: '*.tgz'
          retention-days: 30

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.is_valid == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate a simple changelog from recent commits
          echo "## Changes" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag, or all commits if no previous tags
          if [ $(git tag -l | wc -l) -gt 0 ]; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              git log --oneline --no-merges $LAST_TAG..HEAD --pretty="format:- %s" >> CHANGELOG.md
            else
              git log --oneline --no-merges --pretty="format:- %s" >> CHANGELOG.md
            fi
          else
            git log --oneline --no-merges --pretty="format:- %s" >> CHANGELOG.md
          fi
          
          # Set output for release notes
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: Release ${{ needs.validate.outputs.tag }}
          body: ${{ steps.changelog.outputs.changelog }}
          files: '*.tgz'
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
